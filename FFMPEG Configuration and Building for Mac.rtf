{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf400
{\fonttbl\f0\froman\fcharset0 Times-Roman;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue233;\red28\green0\blue207;}
\margl1440\margr1440\vieww26940\viewh17480\viewkind0
\deftab720
\pard\pardeftab720

\f0\fs24 \cf0 - Install MacPorts:\
search for MacPorts and install it\
\
- Install pkgconfig\
search for pkgconfig and install it\
\
- in Terminal call\
sudo port install pkgconfig\
\
- download gas-preprocessor file\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "https://github.com/yuvi/gas-preprocessor"}}{\fldrslt \cf2 \ul \ulc2 https://github.com/yuvi/gas-preprocessor}}\
\
place the 'gas-preprocessor.pl' file in usr/bin\
and set its preferences to that everyone has read and write access\
\
- Clone the FFMPEG git repository:\
git clone git://source.ffmpeg.org/ffmpeg.git ~/ffmpeg\
\
- Create directories for the build products:\
cd ffmpeg (where ever it is)\
mkdir i386\
mkdir x86_64\
\
- Configure FFMPEG and build it for each architecture:
\b \
i386
\b0 \
./configure --prefix=i386 --disable-static --disable-network --disable-debug --enable-shared --disable-ffmpeg --disable-ffplay --disable-ffprobe --disable-ffserver --enable-avresample --enable-cross-compile --sysroot="
\f1\fs22 \CocoaLigature0 /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10\cf3 .8\cf0 .sdk"
\f0\fs24 \CocoaLigature1  --target-os=darwin --cc="
\f1\fs22 \CocoaLigature0 /Applications/Xcode.app/Contents/Developer/usr/bin/gcc
\f0\fs24 \CocoaLigature1 " --extra-cflags="-arch i386" --extra-ldflags="-arch i386 -isysroot 
\f1\fs22 \CocoaLigature0 /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10\cf3 .8\cf0 .sdk
\f0\fs24 \CocoaLigature1 " --arch=i386 --cpu=i386 --enable-pic --disable-asm\
\
make clean && make && make install\
\
\pard\pardeftab720

\b \cf0 x86_64
\b0 \
./configure --prefix=x86_64 --disable-static --disable-network --disable-debug --enable-shared --disable-ffmpeg --disable-ffplay --disable-ffprobe --disable-ffserver --enable-avresample --enable-cross-compile --sysroot="
\f1\fs22 \CocoaLigature0 /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10\cf3 .8\cf0 .sdk"
\f0\fs24 \CocoaLigature1  --target-os=darwin --cc="
\f1\fs22 \CocoaLigature0 /Applications/Xcode.app/Contents/Developer/usr/bin/gcc
\f0\fs24 \CocoaLigature1 " --extra-cflags="-arch x86_64" --extra-ldflags="-arch x86_64 -isysroot 
\f1\fs22 \CocoaLigature0 /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10\cf3 .8\cf0 .sdk
\f0\fs24 \CocoaLigature1 " --arch=x86_64 --cpu=x86_64 --enable-pic --disable-asm\
\
make clean && make && make install\
\

\b IMPORTANT NOTE: FFMPEG on mac builds binaries that have a web of aliases. On top of this, the binaries have rpaths set internally that refer to these aliases, NOT the actual binaries. Seemingly on Mac, this is not valid and not very friendly to the linker internal to Xcode. To remedy this we must do the following:\
A) for the FFMPEG binaries we will be using, we must set their name properly. By default, the actual binaries have a name something like this: DylibName.MajorNumer.MinorNumber.RevisionNumber.dylib. While internally the binaries reference and link against only DylibName.MajorNumber.dylib. Thus we need to change the name of the binaries we will be using to have the name expected and used during inter-linking - that being DylibName.MajorNumber.dylib
\b0 \
\
- after building the binaries and changing the names of the actual binaries, you will likely have to set the rpath using install_name_tool (and checking via tool) via something like:\
# create a new folder in the hierarchy called 'rpathed' and copy the binaries to a new folder\
# the binaries are part of a web of aliases, the app of which is looking for the binary with the major version number, thus (again\'85) lop the minor and build number off the copied binary\
# go to directory containing dylibs\
cd path/to/dylibs\
# on each of the binaries to be used, run install_name_tool w/ the -id flag and following args to set the rpath on each of the\
install_name_tool -id @rpath/../Frameworks/<dylib-name> <dylib-name>\
# run otool on each of the rpath'd binaries to ensure that the run path was set properly\
otool -L <dylib-name>\
\
- after setting rpath, you may have to correct hard-coded FFMPEG inter-binary search paths, which are set in the dylibs\
# go to directory containing dylibs\
cd path/to/dylibs\
# run otool on each of the rpath'd binaries to ensure that the run path was set properly\
otool -L <name-of-dylib-we-are-tweaking>\
# for any search paths to OTHER dlls on which the given dll depends, which show up in the output, which have hardcoded paths NOT into the /usr folder, \
# but rather into FFMPEG build locations, IE i386/libs/  or x86_64/libs/,  perform the following (using i386/lib as an example), noting that\
# these paths also represent part of a web of aliases, the app of which is looking for the 
\b binary with the major version number, thus ensure only the major number is included in these paths
\b0 \
install_name_tool -change i386/lib/<name-of-dylib-to-which-we-are-linking-MINUS-MINOR-AND-REVISION-NUMBER> @rpath/../Frameworks/<name-of-dylib-to-which-we-are-linking-MINUS-MINOR-AND-REVISION-NUMBER> <name-of-dylib-we-are-tweaking>\
\

\b - To also include x264 in your build of FFMPEG. 
\b0 \
1) From VideoLan.org download a tarball of the current x264 snapshot (search on "VLC x264") and unstuff it.\
2) From yasm.tortall.net download the source for yasm and unstuff it\
3) navigate to the root yasm directory and run './configure' and 'make'\
4) copy the resultant 'yasm' executable to the /usr/bin folder\
5) navigate to the unstuffed x264 snapshot folder and:\
- For x86_64 build, simply run:\
$ ./configure\
$ make\
- For i386 run:\
$ ./configure --enable-pic --enable-shared --disable-asm --host=i686-apple-darwin11.1.0 --extra-cflags="-arch i386" --extra-ldflags="-arch i386" --disable-interlaced\
$ make\
6) loose in the x264 snapshot folder find the libx264.a file that got built as a result of the 'make' and copy it to a standard location, say '/usr/local/bin'\
7) perform the exact same procedure listed above for building FFMPEG with the addition of the following ./configure argument flags: --extra-cflags="-I<root-x264-directory>" --extra-ldflags="-L<directory-to-which-you-copied-libx264.a>" --enable-gpl --enable-libx264 --enable-encoder="aac"\
\
}